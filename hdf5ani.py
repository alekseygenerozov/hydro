import matplotlib.animation as animation
import matplotlib.pyplot as plt

import numpy as np
from tempfile import NamedTemporaryFile

import h5py

VIDEO_TAG = """<video controls>
 <source src="data:video/x-m4v;base64,{0}" type="video/mp4">
 Your browser does not support the video tag.
</video>"""

def anim_to_html(anim):
    if not hasattr(anim, '_encoded_video'):
        with NamedTemporaryFile(suffix='.mp4') as f:
            anim.save(f.name, fps=20, extra_args=['-vcodec', 'libx264'])
            video = open(f.name, "rb").read()
        anim._encoded_video = video.encode("base64")
    
    return VIDEO_TAG.format(anim._encoded_video)

# <codecell>

from IPython.display import HTML

def display_animation(anim):
    plt.close(anim._fig)
    return HTML(anim_to_html(anim))

# <codecell>

#Create movie from save.npz or cons.npz file generated by hydro code.
def animate(saved, radii,  symbol='r', logx=True, logy=False, max_index=-1, ymin=None, ymax=None, times=None, interval=50):
    saved_list=np.array([saved])
    sym_list=np.array([symbol]).flatten()
    if not ymin:
        ymin=np.min(saved[:max_index])
    if not ymax:
        ymax=np.max(saved[:max_index])
    
    fig,ax=plt.subplots()
    if logx:
        ax.set_xscale('log')
    if logy:
        ax.set_yscale('log')
    ax.set_ylim(ymin-0.1*np.abs(ymin), ymax+0.1*np.abs(ymax))
    label=ax.text(0.02, 0.95, '', transform=ax.transAxes)	

    #Plot solution/initial condition/(maybe) analytic solution
    sol={}
    for i in range(len(saved_list)):
        dat=saved_list[i]
        try:
            sol[i],=ax.plot(radii, dat[0], sym_list[i%len(sym_list)])
        except ValueError:
            sol[i],=ax.plot(radii, np.ones(len(radii)))
            #ax.plot(radii, saved[0,:,i], 'b')
    
    def update_img(n):
        # for i in range(len(ind_list)):
        for i in range(len(saved_list)):
            dat=saved_list[i]
            try:
                sol[i].set_ydata(dat[n*interval])
            except:
                sol[i],=ax.plot(radii, np.ones(len(radii)))
        if np.any(times):
            label.set_text(str(times[n*interval]))
        else:
            label.set_text(str(n))
    #Exporting animation
    sol_ani=animation.FuncAnimation(fig,update_img,len(saved_list[0][:max_index])/interval,interval=50, blit=True)
    return sol_ani

#Save solution using data stored in hdf5 file
def movie_save(loc, interval=10, ymin_cons=[None, None, None], ymin=[None, -1, None], ymax_cons=[None, None, None], ymax=[None, 2, None], logy_cons=[True, True, True], logy=[True, False, True], times=None):
    #files=['/mass_cons.mp4', '/be_cons.mp4', '/s_cons.mp4','/rho.mp4', '/vel.mp4', '/temp.mp4']
    hdf5_save=h5py.File(loc+'/save.hdf5', 'r')
    sol_fields=['rho', 'vel', 'temp']
    sol_cons=['frho', 'be', 's']
    sol_src=['src_rho', 'src_v', 'src_s']

    radii=hdf5_save['sol']['rad'][0]
    for i in range(len(sol_fields)):
        field=sol_fields[i]
        saved=hdf5_save['sol'][field][:]
        #If plotting velocity then normalize by the sound speed.
        if field=='vel':
            saved=saved/hdf5_save['sol']['cs'][:]
        
        ani=animate(saved, radii, ymin=ymin[i], ymax=ymax[i], times=times, interval=interval, logy=logy[i], symbol='r')
        ani.save(loc+'/sol_'+field+'.mp4')

    for i in range(len(sol_cons)):
        saved_cons=hdf5_save['cons'][sol_cons[i]][:]
        saved_src=hdf5_save['src'][sol_src[i]][:]

        ani=animate([saved_cons, saved_src], radii[1:], ymin=ymin_cons[i], ymax=ymax_cons[i], times=times, interval=interval, logy=logy_cons[i], symbol=['b','r'])


